using System;
using UnityEngine;
using System.Collections.Generic;

namespace DarkTonic.CoreGameKit
{
	[Serializable]
	public class TriggeredWaveSpecifics
	{
		public bool isExpanded;
		public bool enableWave;
		public KillerInt NumberToSpwn;
		public KillerInt MaxToSpawn;
		public KillerFloat WaveDelaySec;
		public KillerFloat TimeToSpawnEntireWave;
		public Transform prefabToSpawn;
		public string prefabToSpawnCategoryName;
		public bool visualizeWave;
		public WaveSpecifics.SpawnOrigin spawnSource;
		public int prefabPoolIndex;
		public string prefabPoolName;
		public bool enableRepeatWave;
		public WaveSpecifics.RepeatWaveMode curWaveRepeatMode;
		public KillerFloat repeatWavePauseSec;
		public KillerInt maxRepeat;
		public KillerInt repeatItemInc;
		public KillerInt repeatItemLmt;
		public KillerFloat repeatTimeInc;
		public KillerFloat repeatTimeLmt;
		public bool useWaveSpawnBonusForRepeats;
		public bool useWaveSpawnBonusForBeginning;
		public bool waveSpawnFireEvents;
		public List<CGKCustomEventToFire> waveSpawnCustomEvents;
		public bool waveRepeatFireEvents;
		public List<CGKCustomEventToFire> waveRepeatCustomEvents;
		public WorldVariableCollection repeatPassCriteria;
		public bool willDespawnOnEvent;
		public WaveSpecifics.WaveOffsetChoiceMode offsetChoiceMode;
		public List<Vector3> waveOffsetList;
		public bool waveSpawnBonusesEnabled;
		public WorldVariableCollection waveSpawnVariableModifiers;
		public bool useLayerFilter;
		public bool useTagFilter;
		public List<string> matchingTags;
		public List<int> matchingLayers;
		public bool positionExpanded;
		public WaveSpecifics.PositionMode positionXmode;
		public WaveSpecifics.PositionMode positionYmode;
		public WaveSpecifics.PositionMode positionZmode;
		public KillerFloat customPosX;
		public KillerFloat customPosY;
		public KillerFloat customPosZ;
		public Transform otherObjectX;
		public Transform otherObjectY;
		public Transform otherObjectZ;
		public WaveSpecifics.RotationMode curRotationMode;
		public Vector3 customRotation;
		public Vector3 keepCenterRotation;
		public WaveSpecifics.SpawnerRotationMode curSpawnerRotMode;
		public bool eventOriginIgnoreX;
		public bool eventOriginIgnoreY;
		public bool eventOriginIgnoreZ;
		public bool customEventActive;
		public bool isCustomEvent;
		public string customEventName;
		public Vector3 customEventLookRotation;
		public bool enableRandomizations;
		public bool randomXRotation;
		public bool randomYRotation;
		public bool randomZRotation;
		public KillerFloat randomDistX;
		public KillerFloat randomDistY;
		public KillerFloat randomDistZ;
		public KillerFloat randomXRotMin;
		public KillerFloat randomXRotMax;
		public KillerFloat randomYRotMin;
		public KillerFloat randomYRotMax;
		public KillerFloat randomZRotMin;
		public KillerFloat randomZRotMax;
		public bool enableIncrements;
		public bool enableKeepCenter;
		public KillerFloat incrementPositionX;
		public KillerFloat incrementPositionY;
		public KillerFloat incrementPositionZ;
		public KillerFloat incrementRotX;
		public KillerFloat incrementRotY;
		public KillerFloat incrementRotZ;
		public bool enablePostSpawnNudge;
		public KillerFloat postSpawnNudgeFwd;
		public KillerFloat postSpawnNudgeRgt;
		public KillerFloat postSpawnNudgeDwn;
		public bool stopWaveOnOppositeEvent;
		public bool disableAfterFirstTrigger;
		public TriggeredSpawner.RetriggerLimitMode retriggerLimitMode;
		public KillerInt limitPerXFrm;
		public KillerFloat limitPerXSec;
		public int trigLastFrame;
		public float trigLastTime;
	}
}
